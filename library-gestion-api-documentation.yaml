openapi: 3.0.3
info:
  title: Library Management API
  version: 1.0.0
  description: >
    API for managing books and authors in a library system.  
    Provides CRUD operations, filtering options, and idempotent endpoints.
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: https://api.library.com/v1
    description: Production server
  - url: https://sandbox.library.com/v1
    description: Sandbox server

paths:
  /books:
    get:
      summary: Retrieve all books
      description: Get a list of books with optional filtering by name or release date.
      parameters:
        - name: bookName
          in: query
          description: Filter by the name of the book.
          required: false
          schema:
            type: string
        - name: releaseDate
          in: query
          description: Filter by a release date range.
          required: false
          schema:
            type: string
            format: date
            example: 2023-01-01,2023-12-31
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
    put:
      summary: Update an existing book
      description: Idempotent update for a book.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
    delete:
      summary: Delete a book
      parameters:
        - name: id
          in: query
          description: ID of the book to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Book deleted successfully

  /authors:
    get:
      summary: Retrieve all authors
      description: Get a list of authors with optional filtering by name.
      parameters:
        - name: authorName
          in: query
          description: Filter by the name of the author.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Add a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author created successfully
    put:
      summary: Update an existing author
      description: Idempotent update for an author.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author updated successfully
    delete:
      summary: Delete an author
      parameters:
        - name: id
          in: query
          description: ID of the author to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Author deleted successfully

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the book
        bookName:
          type: string
          description: Name of the book
        author:
          type: string
          description: Name of the book's author
        pageNumbers:
          type: integer
          description: Number of pages in the book
        topic:
          type: string
          description: Topic of the book
          enum: [ROMANCE, COMEDY, OTHER]
        releaseDate:
          type: string
          format: date
          description: Release date of the book
    Author:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the author
        name:
          type: string
          description: Name of the author
        sex:
          type: string
          description: Gender of the author
          enum: [M, F]
